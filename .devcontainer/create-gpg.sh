#!/usr/bin/env bash
set -euo pipefail

echo "[create-gpg] startingâ€¦"

# --- defaults (override with env if you want) ---
GPG_KEY_NAME="${GPG_KEY_NAME:-Jetsada Wijit}"
GPG_KEY_EMAIL="${GPG_KEY_EMAIL:-jetsadawijit@outlook.com}"
SIGNING_PASSWORD="${SIGNING_PASSWORD:-$(openssl rand -base64 24)}"

# Ensure gpg can use loopback (non-interactive) pinentry
mkdir -p ~/.gnupg
chmod 700 ~/.gnupg
echo "allow-loopback-pinentry" > ~/.gnupg/gpg-agent.conf || true
gpgconf --reload gpg-agent || true

# Create key if none exists for this email (or if forced)
EXISTING=$(gpg --list-secret-keys --with-colons 2>/dev/null | grep -c "^uid:.*<${GPG_KEY_EMAIL}>$" || true)
if [[ "$EXISTING" -eq 0 || "${FORCE_CREATE_GPG:-0}" == "1" ]]; then
  echo "[create-gpg] generating new 1-day GPG key for ${GPG_KEY_NAME} <${GPG_KEY_EMAIL}>"
  # ed25519 primary key with 'sign' usage, 1-day expiry
  gpg --batch --pinentry-mode loopback \
      --passphrase "${SIGNING_PASSWORD}" \
      --quick-gen-key "${GPG_KEY_NAME} <${GPG_KEY_EMAIL}>" ed25519 sign 1d
else
  echo "[create-gpg] existing key for ${GPG_KEY_EMAIL} found; skipping creation"
fi

# Get fingerprint of the latest secret key
FPR=$(gpg --list-secret-keys --with-colons | awk -F: '/^sec:/ {print $5}' | tail -n1)
if [[ -z "${FPR}" ]]; then
  echo "[create-gpg] ERROR: could not determine key fingerprint"; exit 1
fi

# Export private/public keys (ASCII armored)
PRIV_OUT="$HOME/.gnupg/private-${FPR}.asc"
PUB_OUT="$HOME/.gnupg/public-${FPR}.asc"

gpg --batch --pinentry-mode loopback \
    --passphrase "${SIGNING_PASSWORD}" \
    --export-secret-keys --armor "${FPR}" > "${PRIV_OUT}"

gpg --export --armor "${FPR}" > "${PUB_OUT}"

# Prepare environment exports: store key as base64 to avoid multiline export issues
KEY_B64=$(base64 -w0 "${PRIV_OUT}")

ENV_SNIPPET="$HOME/.maven-central.env"
cat > "${ENV_SNIPPET}" <<EOF
# Auto-generated by .devcontainer/create-gpg.sh
export GPG_KEY_NAME='${GPG_KEY_NAME}'
export GPG_KEY_EMAIL='${GPG_KEY_EMAIL}'
export SIGNING_PASSWORD='${SIGNING_PASSWORD}'
export SIGNING_KEY_B64='${KEY_B64}'
# Decode to SIGNING_KEY for Gradle (ASCII-armored private key)
export SIGNING_KEY="\$(echo "\$SIGNING_KEY_B64" | base64 -d)"
EOF

# Ensure it's loaded for interactive shells
BASHRC="$HOME/.bashrc"
if ! grep -qF ".maven-central.env" "${BASHRC}"; then
  echo "" >> "${BASHRC}"
  echo "# Load Maven Central signing env" >> "${BASHRC}"
  echo "[ -f \$HOME/.maven-central.env ] && source \$HOME/.maven-central.env" >> "${BASHRC}"
fi

echo "[create-gpg] done."
echo "[create-gpg] Key fingerprint: ${FPR}"
echo "[create-gpg] Public key saved at: ${PUB_OUT}"
echo "[create-gpg] Private key saved at: ${PRIV_OUT}"
echo "[create-gpg] Env file: ${ENV_SNIPPET}"
echo "[create-gpg] Variables available after a new shell: SIGNING_KEY, SIGNING_PASSWORD"
